@page "/showprofile"

@using Microsoft.Identity.Web
@using Microsoft.Graph
@inject Microsoft.Graph.GraphServiceClient GraphServiceClient
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler

<h1>Microsoft Graph Api</h1>

<p>This component shows integration with Microsoft Graph Api.</p>

<RadzenTabs @bind-SelectedIndex=@selectedIndex Change=@OnTabsChange>
    <Tabs>
        <RadzenTabsItem Text="User Profile">
            <div>
                <h3>User Profile Info</h3>
                @if (user == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <table class="table table-striped table-condensed" style="font-family: monospace">
                        <tr>
                            <th>Property</th>
                            <th>Value</th>
                        </tr>
                        <tr>
                            <td>ID</td>
                            <td>@user.Id</td>
                        </tr>
                        <tr>
                            <td>Name</td>
                            <td>@user.DisplayName</td>
                        </tr>
                        <tr>
                            <td>GivenName</td>
                            <td>@user.GivenName</td>
                        </tr>
                    </table>
                }
            </div>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Task Lists">
            <div>
                <h3>Load nodes on demand</h3>
                <button @onclick="LoadTasks">Load List of TodoLists</button>
                <RadzenTree Change=@OnTreeChange Data=@listOfLists Expand=@OnExpand Style="width: 100%; height: 300px">
                    <RadzenTreeLevel TextProperty="DisplayName"/>
                </RadzenTree>
            </div>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Insert List">
            <div>
                <h3>Insert New List</h3>
                <input @bind-value="listName"/>
                <button @onclick="AddList">Add List</button>
            </div>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

@code {
    User? user;
    int listCount = 0;
    List<TodoTaskList> listOfLists = new List<TodoTaskList>();
    string listName = "";
    IEnumerable<Todo> todos;
    IEnumerable<TodoTaskList> taskLists;
    int selectedIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await GraphServiceClient.Me.Request().GetAsync();
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }
    }

    void OnTreeChange(TreeEventArgs args)
    {
        Log($"Change - Item Text: {args.Text}");
    }

    void OnTabsChange(int index)
    {
        Log($"Tab with index {index} was selected.");
    }
    
    async Task OnExpand(TreeExpandEventArgs args)
    {
        var todoTaskList = args.Value as TodoTaskList;

        try
        {
            var taskList = await GraphServiceClient.Me.Todo.Lists[$"{todoTaskList.Id}"].Tasks.Request().GetAsync();

            List<TodoTask> childrenData = taskList.Where(task => task != null).ToList();

            args.Children.Data = childrenData;
            args.Children.TextProperty = "Title";
        }
        catch (Exception ex)
        {
            Log($"SOMETHING DIDNT WORK MATE: {ex.Message}");
        }
    }
    
    async Task LoadTasks()
    {
        var todoTaskLists = await GraphServiceClient.Me.Todo.Lists.Request().GetAsync();

        listCount = todoTaskLists.Count;

        foreach (var list in todoTaskLists)
        {
            if (list != null)
            {
                listOfLists.Add(list);
            }
        }
    }

    async Task AddList()
    {
        await GraphServiceClient.Me.Todo.Lists.Request().AddAsync(new TodoTaskList() {DisplayName = listName});
    }

    void Log(string data)
    {
        Console.WriteLine(data);
    }
}
